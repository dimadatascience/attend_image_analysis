/**************************** Basic parameters ****************************/

params {
    // User input parameters
    input = ""
    outdir = ""
    log_file = "" 

    conf_file = ""

    nuclei_expansion = ''
    membrane_diameter = ''
    membrane_compactness = ''

    nuclei_definition = 0.5
    nuclei_closeness = 0.5
    nuclei_diameter = 5
    nuclei_expansion = 15
    membrane_diameter = 10
    // membrane_compactness = 0.9



    preprocessing = false
    
    crop_size_preproc = 4096
    overlap_size_preproc = 1024
    crop_size_affine = 2500 
    overlap_size_affine = 1000 
    crop_size_diffeo = 2000
    overlap_size_diffeo = 800
    downscale_factor = 1
    n_crops = 4

    // Process parameters
    //// Image conversion
    tilex = 512 
    tiley = 512 
    pyramid_resolutions = 3 
    pyramid_scale = 2

    // Activate test configuration
    test = false
    executor = 'pbspro'
}

/**************************** Basic parameters ****************************/
process {
    withName:apply_padding {
        memory = params.test ? '8 GB' : '50 GB' // Use test values if test=true
    }
    withName:affine {
        memory = params.test ? '5 GB' : '70 GB' // Use test values if test=true
    }
    withName:diffeomorphic {
        array = (params.executor == 'local') ? null : '50'
    }
    withName:stitching {
        memory = params.test ? '5 GB' : '60 GB' // Use test values if test=true
    }
    withName:quality_control {
        memory = params.test ? '5 GB' : '60 GB' // Use test values if test=true
    }
    withName:stacking {
        memory = params.test ? '5 GB' : '60 GB' // Use test values if test=true
    }
}

process.executor = params.executor
process.queue = (params.executor == "local") ? null : "workq"

// singularity.runOptions = " --bind /hpcnfs/ --bind /hpcscratch "

executor {
        $pbspro {
                queueSize = 50
        }
}


/**************************** Profiles ****************************/
profiles {
    debug { process.beforeScript = "echo $HOSTNAME" }
    docker {
        docker.enabled         = true
        docker.userEmulation   = { params.use_gatk_spark ? false : true }.call()
        charliecloud.enabled   = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }
    singularity {
        singularity.autoMounts = true
        singularity.enabled    = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        process.container = "docker://alech00/attend_image_analysis:latest"
        // process.container = "/hpcnfs/scratch/DIMA/chiodin/tests/segmentation_tests/alech00-attend_image_analysis-latest.img"
    }
}

/**************************** Manifest ****************************************************/

manifest {
    name            = "image_registration_pipeline"
    author          = """Alessio Chiodin, Yinxiu Zhan"""
    homePage        = "https://github.com/dimadatascience/image_registration_pipeline"
    description     = """Pipeline to convert and register .nd2 images."""
    mainScript      = "main.nf"
    nextflowVersion = "!>=22.10.1"
    version         = "1.0.0"
}

/**************************** Tower ****************************************************/

tower{
    enabled = true
    endpoint= 'https://seqera.ieo.it/api'
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == "memory") {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "time") {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "cpus") {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
